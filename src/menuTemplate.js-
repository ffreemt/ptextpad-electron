const logger = require('tracer').colorConsole({
  format: '{{timestamp}} <{{title}}>{{file}}:{{line}}: {{message}}',
  dateformat: 'HH:MM:ss.L',
  level: process.env.TRACER_DEBUG || 'info' // 'debug'
})
const isMac = process.platform === 'darwin'

let rowData

// const template = [
const menuTemplate = [
  // { role: 'appMenu' }
  ...(isMac
    ? [{
        label: app.name,
        submenu: [
          { role: 'about' },
          { type: 'separator' },
          { role: 'services' },
          { type: 'separator' },
          { role: 'hide' },
          { role: 'hideOthers' },
          { role: 'unhide' },
          { type: 'separator' },
          { role: 'quit' }
        ]
      }]
    : []),
  // { role: 'fileMenu' }
  {
    label: 'File',
    submenu: [
      {
        label: 'Open File1',
        accelerator: 'CmdOrCtrl+O',
        role: 'open',
        click: async () => { await loadFile(mainWindow) }
      },
      {
        label: 'Open File2',
        accelerator: 'CmdOrCtrl+P',
        role: 'open',
        click: async () => {
          logger.debug('open file2')
          let res = []
          try {
            res = await loadFile(mainWindow, 2)
          } catch (err) {
            dialog.showErrorBox('Error', err)
          }
          if (res.success) {
            dialog.showMessageBox(
              {
                message: 'File 2 successfully loaded.',
                title: 'Info',
                buttons: ['OK'],
                type: 'info' // none/info/error/question/warning https://newsn.net/say/electron-dialog-messagebox.html
              }
            )
          } else {
            dialog.showMessageBox(
              {
                message: 'Loading File 2 canceled.',
                title: 'Info',
                buttons: ['OK'],
                type: 'warning' // none/info/error/question/warning https://newsn.net/say/electron-dialog-messagebox.html
              }
            )
          }
        }
      },
      { type: 'separator' },
      {
        label: 'Align',
        accelerator: 'CmdOrCtrl+L',
        click: async () => {
          logger.debug('Align clicked...')
          logger.debug('\n\n\t=== col1 ', typeof col1, Array.isArray(col1))
          logger.debug('\n\n\t===  col2 ', typeof col2, Array.isArray(col2))
          logger.debug('\n\n\t=== lines1 ', typeof lines1, Array.isArray(lines1))
          logger.debug('\n\n\t===  lines2 ', typeof lines2, Array.isArray(lines2))

          const progressBar = new ProgressBar({
            text: 'diggin...',
            detail: 'Fetching alignment result... make sure the net is up '
          })
          progressBar
            .on('completed', function () {
              console.info('completed...')
              progressBar.detail = 'Task completed. Exiting...'
            })
            .on('aborted', function () {
              console.info('aborted...')
            })
          // let rowData  // moved to top as global
          try {
            // rowData = await zmqAlign(col1, col2)
            // rowData = await zmqAlign(lines1, lines2)
            // rowData = await restAlign(lines1, lines2)
            rowData = await restAlign(col1, col2)
          } catch (e) {
            logger.error(e.message)
            // rowData = { text1: e.name, text2: e.message }
            dialog.showMessageBox(
              {
                message: `${e.name}: ${e.message}`,
                title: 'Warning',
                buttons: ['OK'],
                type: 'warning' // none/info/error/question/warning https://newsn.net/say/electron-dialog-messagebox.html
              }
            )
            return null
          } finally {
            progressBar.setCompleted()
          }

          logger.debug(' rowData from col1 col2: %j', rowData)

          if (!rowData) {
            logger.error(' rowData is undefined ')
          } else {
            logger.debug(' send to via rowData channel ')
            // rowData.map((el, idx) => {
            rowData.forEach((el, idx) => {
              if (idx < 5) {
                logger.debug(' send via rowData channel ', el)
              }
            })

            mainWindow.webContents.send('rowData', rowData)
          }
        }
      },
      {
        label: 'Save(csv)',
        accelerator: 'CmdOrCtrl+S',
        click: async () => {
          logger.debug('SaveCsv clicked...')

          if (!rowData) { // undefined or empty
            dialog.showMessageBox(
              {
                message: 'Empty data...Try to Align first.',
                title: 'Warning',
                buttons: ['OK'],
                type: 'warning' // none/info/error/question/warning https://newsn.net/say/electron-dialog-messagebox.html
              }
            )
            return null
          }
          // proceed to save rowData
          let savedFilename = `${path.parse(filename1).name}-${path.parse(filename2).name}.csv`

          savedFilename = path.join(path.parse(path.resolve(filename1)).dir, savedFilename)

          logger.debug(' savedFilename: ', savedFilename)

          converter.json2csv(rowData, (err, csv) => {
            if (err) {
              dialog.showMessageBox(
                {
                  message: 'Unable to convert to csv.',
                  title: 'Warning',
                  buttons: ['OK'],
                  type: 'warning'
                }
              )
              return null
              // throw err
            }

            try {
              logger.debug('csv: ', csv.slice(0, 200))
            } catch (e) {
              logger.debug(e.message)
            }

            try {
              // fs.writeFileSync(savedFilename, csv, 'GB2312')
              // fs.writeFileSync(savedFilename, Buffer.from('EFBBBF', 'hex'))
              // fs.writeFileSync(savedFilename, csv)
              // fs.writeFile(`${outputPath}`, `\ufeff${string}`, 'utf8')
              fs.writeFileSync(savedFilename, `\ufeff${csv}`, 'utf8')

              // const arr = iconv.encode (str, 'GB2312')
              // fs.writeFileSync(savedFilename, arr, 'hex')
              dialog.showMessageBox(
                {
                  message: `${path.resolve(savedFilename)} saved`,
                  title: 'Info',
                  buttons: ['OK'],
                  type: 'info'
                }
              )
            } catch (e) {
              logger.error(e)
              dialog.showMessageBox(
                {
                  message: 'Unable to save, ' + e.message,
                  title: 'Warning',
                  buttons: ['OK'],
                  type: 'warning'
                }
              )
            }
          })
        }
      },
      { type: 'separator' },
      isMac ? { role: 'close' } : { role: 'quit' }
    ]
  },
  // { role: 'editMenu' }
  {
    label: 'Edit',
    submenu: [
      { role: 'undo' },
      { role: 'redo' },
      { type: 'separator' },
      { role: 'cut' },
      { role: 'copy' },
      { role: 'paste' },
      ...(isMac
        ? [
            { role: 'pasteAndMatchStyle' },
            { role: 'delete' },
            // { role: 'selectAll' },
            // { type: 'separator' },
            {
              label: 'Speech',
              submenu: [
                { role: 'startSpeaking' },
                { role: 'stopSpeaking' }
              ]
            }
          ]
        : [
            { role: 'delete' }
            // { type: 'separator' },
            // { role: 'selectAll' },
          ])
    ]
  },
  // { role: 'viewMenu' }
  {
    label: 'View',
    submenu: [
      { role: 'reload' },
      { role: 'forceReload' },
      { role: 'toggleDevTools' },
      { type: 'separator' },
      { role: 'resetZoom' },
      { role: 'zoomIn' },
      { role: 'zoomOut' },
      { type: 'separator' },
      { role: 'togglefullscreen' }
    ]
  },
  // { role: 'windowMenu' }
  {
    label: 'Window',
    submenu: [
      { role: 'minimize' },
      // { role: 'zoom' },
      ...(isMac
        ? [
            { type: 'separator' },
            { role: 'front' },
            { type: 'separator' },
            { role: 'window' }
          ]
        : [
            { role: 'close' }
          ])
    ]
  },
  {
    role: 'help',
    submenu: [
      {
        label: 'Goto repo',
        click: async () => {
          const { shell } = require('electron')
          // await shell.openExternal('https://electronjs.org')
          await shell.openExternal('https://github.com/ffreemt/ptextpad-electron')
        }
      },
      {
        label: 'Join qqgroup-316287378',
        click: async () => {
          const { shell } = require('electron')
          // await shell.openExternal('https://electronjs.org')
          // await shell.openExternal('https://github.com/ffreemt/ptextpad-electron')
          await shell.openExternal('https://jq.qq.com/?_wv=1027&k=9018eFSV')
        }
      },
      { label: `v.${require('../package.json').version}` }
    ]
  }
]

module.exports = menuTemplate
